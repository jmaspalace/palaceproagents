<?php



function extauth_boot(){
  #print_r( "Esto es debug 2" );
  #drupal_set_message( t("PASO1") );
  #debug( t("PASO1") );
}

function extauth_init(){
  #drupal_set_message ( "PASO1" );
}
/**
 * Implement hook_help() to display a small help message if somebody clicks the "Help" link on the modules list.
 */
function extauth_help($path, $arg) {
  switch ( $path ) {
    case 'admin/help#extauth' : {
      return ('<p>' . t('This module allows users who login with e-mail addresses to authenticate off an external system.') . '</p>');
    }
  }
}

function extauth_user_login(&$edit, $account) {
  /*$edit['redirect'] = 'http://www.google.com';
  $_GET['destination'] = 'http://www.google.com';*/
  //global $base_url, $language;
  $redirect_url = url('/', array('absolute' => TRUE));
  $system_usr_reservHotel = "PalacePro";
  $system_pwd_reservHotel = "MexicoJamaica44";

  if (strpos($account->name, '@') !== false)
  {
    if (isset($_SESSION['agency_country']) && strtolower($_SESSION['agency_country']) === 'us')
    {
      drupal_goto("https://www.reservhotel.com/win/owa/TA_LOGIN_WS.LOGIN?HGROUP=PALACE&system_usr=".urlencode($system_usr_reservHotel)."&system_pwd=".urlencode($system_pwd_reservHotel)."&USR=".urlencode($_SESSION['agent_id'])."&AGENCY=".urlencode($_SESSION['agency_id'])."&TOKEN=".urlencode(substr(session_id(), 0, 20))."&REDIRECT_URL=".urlencode($redirect_url));
    }
    else
    {
      drupal_goto($redirect_url);
    }
  }
}

function extauth_user_logout($account) {
  /*$edit['redirect'] = 'http://www.google.com';
  $_GET['destination'] = 'http://www.google.com';*/
  //global $base_url, $language;
  $redirect_url = url('/', array('absolute' => TRUE));
  $system_usr_reservHotel = "PalacePro";
  $system_pwd_reservHotel = "MexicoJamaica44";

  if (strpos($account->name, '@') !== false)
  {
    // Las variables de sesion se almacenan en variables temporales antes de que sean destruidas.
    $temp_agency_id = $_SESSION['agency_id'];
    $temp_agent_id = $_SESSION['agent_id'];
    $temp_agency_country = $_SESSION['agency_country'];

    try
    {
      $options = array(
        'location' => 'https://api2.palaceresorts.com/BCMServiceInterface/BCMServiceInterface.asmx',
        'soap_version' => 'SOAP_1_2',
        'trace' => TRUE,
        'cache_wsdl' => WSDL_CACHE_NONE
      );
      $proxy = new SoapClient('https://api2.palaceresorts.com/BCMServiceInterface/BCMServiceInterface.asmx?WSDL', $options);
      $LogoutBCM = new LogoutBCM();
      $LogoutBCM->usuario = $account->name;
      $response = $proxy -> LogoutBCM ($LogoutBCM);
    }
    catch (SoapFault $e)
    {
      watchdog('exaauth', 'Error llamando el servicio de logout: '.$e->getMessage(), WATCHDOG_ERROR);
    }
    catch (Exception $e)
    {
      watchdog('exaauth', 'Error llamando el servicio de logout: '.$e->getMessage(), WATCHDOG_ERROR);
    }

    session_destroy();
    if( strtolower($temp_agency_country) === 'us' )
    {
      drupal_goto("https://www.reservhotel.com/win/owa/TA_LOGIN_WS.LOGOUT?HGROUP=PALACE&system_usr=".urlencode($system_usr_reservHotel)."&system_pwd=".urlencode($system_pwd_reservHotel)."&USR=".urlencode($temp_agent_id)."&AGENCY=".urlencode($temp_agency_id)."&TOKEN=".urlencode(substr(session_id(), 0, 20))."&REDIRECT_URL=".urlencode($redirect_url));
    }
  }
}

/**
 * Implement hook_form_alter() to change the behaviour of the login form.
 *
 * Login validators are set in the user_login_default_validators() function in user.module.
 * They are normally set to array('user_login_name_validate',
 * 'user_login_authenticate_validate', 'user_login_final_validate').
 * We simply replace 'user_login_authenticate_validate' with 'extauth_login_validate'.
 */
function extauth_form_user_login_alter(&$form, $form_state) {
  unset($form['links']);
  //Aqui llega cuando se hace el login
  $form['#validate'] = array('user_login_name_validate', 'extauth_login_validate', 'user_login_final_validate');
}

function extauth_form_user_login_block_alter(&$form, $form_state) {
  return extauth_form_user_login_alter($form, $form_state);
}

/**
 * Implement hook_user_profile_form_alter() to disable the ability to change email address and
 * password for externally authenticated users.
 */
function extauth_form_user_profile_form_alter(&$form, $form_state) {
  if (strpos($form['#user'] -> name, '@') !== false) {
    $form['account']['name']['#disabled'] = TRUE;
    $form['account']['name']['#description'] = t('The username for this account cannot be changed');
    $form['account']['mail']['#disabled'] = TRUE;
    $form['account']['mail']['#description'] = t('This e-mail address for this account cannot be changed.');
    $form['account']['current_pass']['#disabled'] = TRUE;
    $form['account']['current_pass']['#description'] = t('Neither the email address or password for this account can be changed.');
    $form['account']['pass']['#disabled'] = TRUE;
    $form['account']['pass']['#description'] = t('The password for this account cannot be changed.');
  }
}

/**
 * The extauth_login_validate() function attempts to authenticate a user off the external system
 * using their e-mail address.
 */
function extauth_login_validate($form, &$form_state) {
  global $user;
  $username = $form_state['values']['name'];
  #print_r( $user );exit;
  #print_r( $username );exit;
  // In our case we're assuming that any username with an '@' sign is an e-mail address,
  // hence we're going to check the credentials against our external system.
  if (strpos($username, '@') !== false) {
    // Looks like we found them - now we need to check if the password is correct
    if (validateExternalUser($username, $form_state['values']['pass'])) {
      user_external_login_register($username, 'extauth');
      // I wish we didn't have to do this, but I couldn't find any other way to get the
      // uid at this point
      $form_state['uid'] = $user -> uid;
    } // else drop through to the end and return nothing - Drupal will handle the rejection
  } else {
    #print( "Drupal Login" );exit;
    // Username is not an e-mail address, so use standard Drupal authentication function
    user_login_authenticate_validate($form, $form_state);
  }
}

/**
 * The extauth_user_insert() function gets called by Drupal AFTER a new user has been added.
 * If the e-mail address has already been set then we don't want to overwrite it, as the user
 * is probably being added manually. Thankfully the only time a user can be added without the
 * e-mail being set is when an external user gets authenticated for the first time, at which
 * point a user is inserted into the database without an e-mail address, which is the case we
 * will deal with in this function.
 */
define('EXTERNAL_AUTH_RID', 2);

function extauth_user_insert(&$edit, &$account, $category = null) {
  // Remember: this function gets called whenever a new user is added, not just when a new
  // user is being added as a result of them being externally authenticated. So we need to
  // avoid running the following checks if the user is being added by some other means (eg.
  // manually by the administrator). In this simple example we're assuming that any user ID
  // that is an email address is externally authenticated. However, there are possibly
  // better ways to do this, such as look up the authmaps table and see if there is a row
  // for this user where module is 'extauth'.
  if (strpos($account -> name, '@') !== false) {
    // This hook is called during the registration process, AFTER the new user has been
    // added to the users table but BEFORE the roles are written to the users_roles table
    if (empty($account -> mail)) {
      db_update('users') -> fields(array('mail' => $account -> name)) -> condition('uid', $account -> uid, '=') -> execute();
    }

    // Note: you can do other stuff here, like set the password to be the md5 hash of the
    // remote password. This might be handy if you wanted to allow people to log on when
    // the external system is unavailable, but, of course, it introduces the hassle of
    // keeping the passwords in sync.

    // This is where we set that additional role to indicate that the user is authenticated
    // externally. Note that EXTERNAL_AUTH_RID is defined as 3 in this sample code but you
    // should set it to whatever Role ID is appropriate in your case, eg. create the new
    // role, do a query to find the RID for that role and set EXTERNAL_AUTH_RID to that RID.
    $account -> roles[EXTERNAL_AUTH_RID] = 'external user';
  }
}

/**
 * This is the helper function that you will need to modify in order to invoke your external
 * authentication mechanism.
 */
function validateExternalUser($username, $password) {
  ini_set('soap.wsdl_cache_enable', 0);
  ini_set('soap.wsdl_cache_ttl', 0);

  ini_set('display_errors', 'On');
  error_reporting(E_ALL);

  $AccountRequest = new AccountRequest();

  $Account = new Account();

  $Account -> Email = $username;//'georgekimal@gmail.com';
  $Account -> Password = $password;
  $Account -> FirstName = '';
  $Account -> LastName = '';
  $Account -> Language = '';

  $AccountRequest -> Account = (array)$Account;

  $LoginBCM = new LoginBCM();

  $LoginBCM -> AccountRequest = (array)$AccountRequest;

  // var_dump($LoginBCM);

  try {
    $options = array(
      'location' => 'https://api2.palaceresorts.com/BCMServiceInterface/BCMServiceInterface.asmx',
      'soap_version' => 'SOAP_1_2',
      'trace' => TRUE,
      'cache_wsdl' => WSDL_CACHE_NONE,
    );
    $proxy = new SoapClient('https://api2.palaceresorts.com/BCMServiceInterface/BCMServiceInterface.asmx?wsdl', $options);

    $response = $proxy -> LoginBCM($LoginBCM);

    if($response->UserInfoResponse->HasErrors != 1)
    {
      
      if(isset($response->UserInfoResponse->Data->UserInfo->Agency))
      {
        $_SESSION['agency']=TRUE;

        $_SESSION['agency_id'] = $response->UserInfoResponse->Data->UserInfo->Agency->Agency->AgencyId;
        $_SESSION['agent_id'] = $response->UserInfoResponse->Data->UserInfo->Agent->Agent->AgentId;
        $_SESSION['agency_country'] = $response->UserInfoResponse->Data->UserInfo->Agency->Agency->Country;
        $_SESSION['full_data_agent'] = $response->UserInfoResponse->Data;
        $_SESSION['full_name'] = $response->UserInfoResponse->Data->UserInfo->Agency->Agency->name;

      }
      elseif(isset($response->UserInfoResponse->Data->UserInfo->Agent))
      {
        $_SESSION['agent']=TRUE;

        $_SESSION['agency_id'] = $response->UserInfoResponse->Data->UserInfo->Agent->Agencies->Agency->AgencyId;
        $_SESSION['agent_id'] = $response->UserInfoResponse->Data->UserInfo->Agent->Agent->AgentId;
        $_SESSION['agency_country'] = $response->UserInfoResponse->Data->UserInfo->Agent->Agencies->Agency->Country;
        $_SESSION['full_data_agent'] = $response->UserInfoResponse->Data->UserInfo;
        $_SESSION['full_name'] = $response->UserInfoResponse->Data->UserInfo->Agent->Agent->FirstName." ".$response->UserInfoResponse->Data->UserInfo->Agent->Agent->LastName;

         
         

      }
      $dataEncrypt=$username.'|'.$password;
      $key="bcm";
      $_SESSION['dataEncrypt']=Encrypt($dataEncrypt, $key);
      return TRUE;
    }
    else
    {
      echo '<span class="message-login">'.t("The info entered is not recognized. Please try again or make sure you're correctly logged in.").'</span>';
      return FALSE;
    }
  }
  catch (SoapFault $e)
  {
    echo '<span class="message-login">'.t("The info entered is not recognized. Please try again or make sure you're correctly logged in.").'</span>';
    watchdog('exaauth', 'Error llamando el servicio de login: '.$e->getMessage(), WATCHDOG_ERROR);
    return FALSE;
  }
  catch (Exception $e)
  {
    echo '<span class="message-login">'.t("The info entered is not recognized. Please try again or make sure you're correctly logged in.").'</span>';
    watchdog('exaauth', 'Error llamando el servicio de login: '.$e->getMessage(), WATCHDOG_ERROR);
    return FALSE;
  }
}

function Encrypt($data, $secret)
{
  //Generate a key from a hash
  $key = md5(utf8_encode($secret), true);

  //Take first 8 bytes of $key and append them to the end of $key.
  $key .= substr($key, 0, 8);
  //print_r("Key=".$key."<br/>");

  //Pad for PKCS7
  $blockSize = mcrypt_get_block_size('tripledes', 'ecb');
  $len = strlen($data);
  $pad = $blockSize - ($len % $blockSize);
  $data .= str_repeat(chr($pad), $pad);

  //Encrypt data
  $encData = mcrypt_encrypt('tripledes', $key, $data, 'ecb');

  return $encData;
}

class LoginBCM {
  Public $AccountRequest;
}

// Clase para encapsular el Request
class AccountRequest {
  public $Account;
}

Class Account {
  /**
   * @var string
   * @soap
   **/
  public $Email;

  /**
   * @var string
   * @soap
   **/
  public $FirstName;

  /**
   * @var string
   * @soap
   **/
  public $LastName;

  /**
   * @var string
   * @soap
   **/
  public $Language;

  /**
   * @var string
   * @soap
   **/
  public $Password;

}

class LogoutBCM {
  /**
   * @var string
   * @soap
   **/
  public $usuario;
}
?>
